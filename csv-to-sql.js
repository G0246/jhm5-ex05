#!/usr/bin/env node

/**
 * Simple CSV to SQL converter for DSE 2024 data
 * Run this script in a Node.js environment to process CSV files
 */

console.log('🚀 DSE 2024 CSV to SQL Converter');
console.log('==================================');

const fs = require('fs');
const path = require('path');

// Simple CSV parser
function parseCSV(csvContent) {
  const lines = csvContent.trim().split('\n');
  const headers = lines[0].split(',').map(h => h.trim());

  return lines.slice(1).map(line => {
    const values = line.split(',').map(v => v.trim());
    const obj = {};

    headers.forEach((header, index) => {
      const value = values[index];
      // Try to parse as number if it looks like a number
      if (!isNaN(Number(value)) && value !== '') {
        obj[header] = Number(value);
      } else {
        obj[header] = value;
      }
    });

    return obj;
  });
}

// Generate SQL for performance data
function generatePerformanceSQL(data, year = 2024) {
  const inserts = data.map(row => {
    const values = [
      year,
      `'${row.subject_code}'`,
      `'${row.subject_name}'`,
      row.total_candidates,
      row.level_5_star_star || 0,
      row.level_5_star || 0,
      row.level_5 || 0,
      row.level_4 || 0,
      row.level_3 || 0,
      row.level_2 || 0,
      row.level_1 || 0,
      row.unclassified || 0,
      row.mean_score || 0,
      row.standard_deviation || 0
    ].join(', ');

    return `(${values})`;
  }).join(',\n');

  return `INSERT INTO dse_performance (year, subject_code, subject_name, total_candidates, level_5_star_star, level_5_star, level_5, level_4, level_3, level_2, level_1, unclassified, mean_score, standard_deviation) VALUES\n${inserts};`;
}

// Main processing
const csvDir = './data/csv';
const outputDir = './database/imports';
const year = 2024;

console.log(`📁 Looking for CSV files in: ${csvDir}`);
console.log(`📤 Output directory: ${outputDir}`);

try {
  if (!fs.existsSync(csvDir)) {
    console.log(`❌ CSV directory not found: ${csvDir}`);
    process.exit(1);
  }

  const files = fs.readdirSync(csvDir).filter(f => f.endsWith('.csv'));

  if (files.length === 0) {
    console.log('⚠️  No CSV files found');
    console.log('💡 Expected files:');
    console.log('   - dse_performance_2024.csv');
    console.log('   - dse_registration_2024.csv');
    console.log('   - dse_search_interest_2024.csv');
    console.log('   - subject_trends_2024.csv');
    process.exit(0);
  }

  const sqlStatements = [];
  const header = `-- DSE ${year} Data Import from CSV\n-- Generated on ${new Date().toISOString()}\n-- Auto-generated by csv-to-sql.js\n\n`;

  files.forEach(file => {
    console.log(`📄 Processing: ${file}`);

    const filePath = path.join(csvDir, file);
    const csvContent = fs.readFileSync(filePath, 'utf-8');
    const data = parseCSV(csvContent);

    console.log(`   ✅ Parsed ${data.length} records`);

    // Generate appropriate SQL based on filename
    if (file.includes('performance')) {
      sqlStatements.push(generatePerformanceSQL(data, year));
    } else if (file.includes('registration')) {
      // Add registration SQL generation if needed
      console.log('   ⚠️  Registration SQL generation not implemented yet');
    } else if (file.includes('search_interest')) {
      // Add search interest SQL generation if needed
      console.log('   ⚠️  Search interest SQL generation not implemented yet');
    } else if (file.includes('trends')) {
      // Add trends SQL generation if needed
      console.log('   ⚠️  Subject trends SQL generation not implemented yet');
    }
  });

  if (sqlStatements.length > 0) {
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    const outputPath = path.join(outputDir, `csv_import_${year}.sql`);
    const fullSQL = header + sqlStatements.join('\n\n');

    fs.writeFileSync(outputPath, fullSQL);

    console.log('\n✅ Conversion completed!');
    console.log(`📄 SQL file: ${outputPath}`);
    console.log(`📊 Total statements: ${sqlStatements.length}`);
  } else {
    console.log('\n⚠️  No SQL statements generated');
  }

} catch (error) {
  console.error('❌ Error:', error.message);
  process.exit(1);
}